---------------------- SQL ----------------------
Syntax to Create a New Login Details

CREATE LOGIN <LOGIN NAME> WITH PASSWORD='<PASSWORD>';

CREATE LOGIN RAJKUMAR WITH PASSWORD='1234'


--------------- Create a New Database ---------------
SYNTAX:

CREATE DATABASE <DB NAME>
CREATE DATABSE MYCLASSDB;

-------------- SUB-LANGUAGES OF SQL -------------
1)DDL (Data-Defnation-Language) --> CREATE,ALTER,SP_RENAME,TRUNCATE & DROP COMMANDS.
2)DML (Data-Manipulation-Language) --> INSERT,UPDATE & DELETE COMMANDS
3)DQL (Data-Query-Language) --> SELECT COMMAND.
4)TCL (Transaction-Control-Language) -->COMMIT,ROLLBACK & SAVEPOINT COMMANDS.
5)DCL (Data-Control-Language) --> GRANT & REVOKE COMMANDS.


1) DDL (Data-Defnation-Language)
================================
-> CREATE NEW OBJECTS(TABLE,VIEW,SYNONYM,PROCEDURE,FUNCTION,TRIGGER...)
-> MODIFY THE STRUCTURE OF THE OBJECTS
-> DROP THE OBJECTS FROM DB.

A) CREATE COMMAND: TO CREATE A NEW DATABASE & TABLE
---------------------------------------------------
CREATE DATABASE <DBNAME> and "Excute" Button

CREATE DATABASE MYCLASS
USE MYCLASS            -> Use Current DATABSE

CREATE TABLE <TABLE NAME>(<COLUMN NAME1><DATATYPE>[SIZE],
                          <COLUMN NAME1><DATATYPE>[SIZE]...)
      
CREATE DATABASE MYCLASS
USE MYCLASS
CREATE TABLE EMPLOYEE (EMPID INT, EMPNAME CHAR(10),SALARY MONEY,AGE TINYINT)      -> Create Table with 4 Columns and "Excute" Button

Syntax to View Structure of a Table
-----------------------------------
SP_HELP <TABLE NAME>
SP_HELP EMPLOYEE -> Only Excute this single command

B) ALTER COMMAND (change, add ,for existing table like Column Names etc...)
----------------
-> How to Change Datatype and Also Size of the Datatype.
-> How to Add a New Column to the Table.
-> How to Change a Column Name.
-> How to Drop the Unwanted Columns from Table

SUB-COMMANDS OF ALTER:
----------------------

i) ALTER-ALTER COLUMN (Change Column Names)
---------------------
To Change Datatype and Also Size of the DataType.

Syntax -> ALTER TABLE <TN> ALTER COLUMN <COLUMN NAME><NEW DATATYPE>[NEW SIZE];

ALTER TABLE EMPLOYEE ALTER COLUMN ENAME VARCHAR(50) -> I'm Changing ENAME Length Increase

ii) ALTER-ADD ( Add New Columns to the Table Columns)
-------------
Syntax -> ALTER TABLE <TN> ADD <NEW COLUMN NAME><DATATYPE>[SIZE];

ALTER TABLE EMPLOYEE ADD EADDRESS VARCHAR(40);

iii) SP_RENAME (Change Column Name & Table Name)
--------------
Syntax -> SP_RENAME '<TN>.<OLD COLUMN NAME>', '<NEW COLUMN NAME>';

SP_RENAME 'EMPLOYEE.ENAME','EMPLOYEENAME' -> ENAME was Changed to EMPLOYEENAME (Change Column Name)

SP_RENAME 'EMPLOYEE','EMP' -> EMPLOYEE Table was Changed to EMP (Change Table Name)

iv) ALTER-DROP (Delete Unwanted Columns from the Table)
--------------

Syntax -> ALTER TABLE <TN> DROP COLUMN <COLUMN NAME>;

ALTER TABLE EMP DROP COLUMN EADDRESS


C) TRUNCATE (To Delete All Rows from the Table AT A Time)
-----------
*We Cannot Delete a Specific row from the Table
*It Not Supports "WHERE" Keyword Condition

Syntax -> TRUNCATE TABLE <TN>;

TRUNCATE TABLE EMP

D) DROP ( To Drop a Table)

Syntax -> DROP TABLE <TABLE NAME>;

DROP TABLE EMP


------------------------------------------------------------------------------
2) DML (Data-Manipulation-Language) --> INSERT,UPDATE & DELETE COMMANDS
------------------------------------------------------------------------------

A) INSERT (To Insert New Values Into a Table)

First Create a Table -> CREATE TABLE STUDENT(STID INT,SNAME VARCHAR(40), SFEE DECIMAL(6,2), AGE TINYINT)

Syntax -> INSERT[INTO] <TN> VALUES(VALUE1,VALUE2,VALUE3,.............);

INSERT INTO STUDENT VALUES(101,'ADAMS',3500,23) -> Inserted Values to the Table

SELECT * FROM STUDENT

B) UPDATE ( Modify the Values)
* To Update All Rows & Specific Row Data in Table.

Syntax -> UPDATE <TN> SET <COLUMN NAME1>=VALUE1,<COLUMN NAME2=VALUE2

UPDATE STUDENT SET SFEE=5000 WHERE STID=103 -> Update the Specific Column DATA

UPDATE STUDENT SET AGE=26 WHERE AGE IS NULL -> (in AGE Column Where NULL is there I'm Adding,Asign Value -> NULL = 26)

* 'IS' Keyword is Mandatory where NULL There. 
* 'WHERE' Keyword is Specific Data Value


UPDATE STUDENT SET SFEE=800 -> ( SFEE Column All Values Is 8000)

C) DELETE ( Delete All Rows and Specific Row from the Table)

Syntax -> DELETE FROM <TABLE NAME>[WHERE(CONDITION)];

DELETE FROM STUDENT WHERE SNAME='JAMES' -> ( Where JAMES Column is there Delete Row)

DELETE FROM STUDENT WHERE AGE IS NULL -> ( Where AGE Column is NULL Delete Row)

DELETE FROM STUDENT -> ( Delete All Rows without Table Structure)


------------------------------------------------------------------------------------
3) DQL,DRL (Data-Query-Language or Data Retrieving Language) --> SELECT COMMAND
------------------------------------------------------------------------------------
A) SELECT
*Read Data
*Retrieve Data
*Display Data

Syntax -> SELECT * / <LIST OF COLUMN NAMES> <TN>
[WHERE (CONDITION)];

CREATE DATABASE DEMO
USE DEMO
CREATE TABLE STUDENT(STID INT, SNAME VARCHAR(40), SFEE DECIMAL(6,2), AGE TINYINT)

SELECT * FROM STUDENT

SELECT * FROM STUDENT WHERE SNAME='SCOTT' -> ( Read Specific Data Row)

SELECT STID,SFEE FROM STUDENT WHERE SNAME='SCOTT' -> ( Read Only Selected Columns and DATA)

RETRIVE METHODS
---------------
-> Projection Method (Without Condition Retrieve)
   SELECT * FROM STUDENT
   SELECT STID, SNAME, SFEE, AGE FROM STUDENT

-> Selection Method ( With Condition Retrieve)
   SELECT * FROM STUDENT WHERE SNAME='SCOTT'
   SELECT STID,SFEE FROM STUDENT WHERE SNAME='SCOTT'

-> Joins ( Retrieve Data from More than One Table)
 

IDENTITY(SEED, INCREMENT):IDENTITY(1,1) 
---------------------------------------
-> Auto Increment Values On A Column.
-> SEED (Starting Value of ID). "Default Is 1"
-> INCREMENT (INCREMENT Value In B/W ID'S."Default Is 1"

-> NUMERIC DATATYPE Columns.(INT, DECIMAL,NUMERIC,....)
-> A TABLE Contains One IDENTITY Function Only.

 CREATE TABLE EMP(EID INT IDENTITY,ENAME VARCHAR(40),SALARY MONEY)
 
 INSERT INTO EMP VALUES('Rajkumar', 62000)

 INSERT INTO EMP(ENAME,SALARY) VALUES('BB',15000)

 SET INDENTITY_INSERT EMP ON -> ( Set Acceptable Auto Increment)
 
 INSERT INTO EMP(EID, ENAME,SALARY) VALUES(5,'BB',15000)


SET OPERATORS
-------------
-> To Combined Two or More than Two Select Statements.
---------------------------------
-> UNION*
   To Combined the result of two or more than two select Statements as a Single Unit of Values Without Duplicate Values
---------------------------------
-> UNION ALL*
   To Combined the result of two or more than two select Statements as a Single Unit of Values With Duplicate Values
---------------------------------
-> INTERSECT
   To Return Common Values from the Tables
---------------------------------
-> EXCEPT
   To Returns All Values from the Left Hand Side Table Which are not Found in the Right Hand Table

RULES
-----
a) No. Of Columns Should Same with in Both Select Statements.
b) ORDER Of the Columns Should be Same.
c) DataTypes Of the Columns Must be Match

CREATE DATABASE MYCLASS
USE MYCLASS
CREATE TABLE EMP_HYD (EID INT, ENAME CHAR(20),SALARY MONEY) -> and "Excute" Button
CREATE TABLE EMP_CHENNAI (EID INT, ENAME CHAR(20),SALARY MONEY) -> and "Excute" Button

EMP_HYD Table
-------------
EID    ENAME    SALARY
101    ADAMS    85000.0000
102    SCOTT    35000.0000
103    JAMES    45000.0000
104    WARNER   15000.0000
105    ADAMS    12000.0000


EMP_CHENNAI Table
-------------
EID    ENAME    SALARY
101    ADAMS    85000.0000
105    ALLEN    11000.0000
106    MILLER   98000.0000
104    WARNER   15000.0000
105    ADAMS    12000.0000

-----------UNION---------------
SELECT * FROM EMP_HYD
UNION
SELECT * FROM EMP_CHENNAI

SELECT EID,ENAME FROM EMP_HYD
SELECT EID,ENAME FROM EMP_CHENNAI

----------UNION ALL---------------
SELECT * FROM EMP_HYD
UNION ALL
SELECT * FROM EMP_CHENNAI

----------INTERSECT---------------
SELECT * FROM EMP_HYD
INTERSECT
SELECT * FROM EMP_CHENNAI

----------EXCEPT---------------
SELECT * FROM EMP_HYD
EXCEPT
SELECT * FROM EMP_CHENNAI

SELECT * FROM EMP_CHENNAI
EXCEPT
SELECT * FROM EMP_HYD


----------------------------------------------------------------------------------------------------------------------------
Working With Primary Key & Foreign Key 
----------------------------------------------------------------------------------------------------------------------------
-> To Make the Relation between two or More than Two Tables.

Conditions
----------
a) One Table Should Contains PrimaryKey & Another Table Contains ForeignKey
b) a Common Column in Both Tables (DEPTNO)
c) The Common Column DataType Must be Same in Both Tables

CREATE TABLE DEPARTMENT(DEPTNO INT PRIMARY KEY, DNAME VARCHAR(40),LOCATION VARCHAR(40)) ---Parent Table ---

INSERT DEPARTMENT VALUES(10,'DBA','HYD'), (20,'SAP','MUMBAI'),(30,'HR','PUNE')

SELECT * FROM DEPARTMENT

CREATE TABLE EMPLOYEE(EMPID INT, ENAME VARCHAR(40), SALARY MONEY, DEPTNO INT FOREIGN KEY REFERENCES DEPARTMENT(DEPTNO))  ---Child Table---

INSERT EMPLOYEE VALUES (101,'ADAMS',56000,10)
INSERT EMPLOYEE VALUES (102,'JAMES',45000,20)
INSERT EMPLOYEE VALUES (103,'SCOTT',23000,30)

SELECT * FROM DEPARTMENT
SELECT * FROM EMPLOYEE


--------------------------------------------------------------------------------------------------
 Joins
--------------------------------------------------------------------------------------------------
-> When we retrieve the data from more than one table

A) ANSI-FORMAT JOINS(NEW STYLE FORMAT): With "ON" keyword Join Condition
--------------------
-> Syntax : SELECT * / <LIST OF COLUMN NAMES> FROM <TN1> <JOIN KEY> <TN2> ON (JOINING CONDITION);

-> INNER JOIN 
      * Retrieve the DATA From Multiple Tables Based on an Equality Condition
      * Common Column
      * the Common Column DataType Must be Same
      * Matching Data / Rows.

-> OUTER JOIN -> Matching & UnMatching Data from the Tables
         *LEFT OUTER JOIN -> Retrieve The Matching Data from All Tables But UnMatching Data from the Left Hand Side Table Only.
         *RIGHT OUTER JOIN -> Retrieve The Matching Data from All Tables But UnMatching Data from the Right Hand Side Table Only.
         *FULL OUTER JOIN -> Retrieve The Matching & UnMatching Data from All Tables.

-> CROSS JOIN -> The Product of Rows.(M x N Rows).
       *To Join Two or More than Two Tables Data Without Join Condition.
       *There is No Req. A Common Column in the Tables.

-> NATURAL JOIN -> To Avoid Duplicate Columns from Join Tables.

B) NON-ANSI FORMAT JOINS(OLD STYLE FORMAT) : With "WHERE" Keyword Join Condition
------------------------
-> EQUI-JOIN
------------
    *Retrieve Data from the Multiple Tables Based On an Equality Condition ( = ).
    *Cannot Use The Folowing Operators are <,>,<=,>=,!<,!>,!=

-> NON EQUI-JOIN
----------------
    *Retrieve Data from the Multiple Tables Based ON Any Condition Except Equal Condition.
    *Cannot Use = Operator(=)
    *Can Use ( <,>,<=,>=,!<,!>,!= )
    *No Need A Common Column

-> SELF JOIN
------------
    *Joining A Table Data by itSelf is Called as Self Join.
    *Can Use With Alias Name of the Table.
    *Can be Implemented ON A Single Table Only.
    *Any Number of Alias Names on a Single Table. 
    *When we Compare a Column Values with in the Same Table.

CREATE TABLE STUDENT(STID INT, SNAME VARCHAR(40),SMAILID VARCHAR(40),COURSEID INT)

STID    SNAME   SMAILID        COURSEID
101     ADAMS   add@gmail.com   10
102     JAMES   jay@gmail.com   20
103     SCOTT   scot@gmail.com  30

CREATE TABLE COURSE(COURSEID INT, CNAME VARCHAR(40),CFEE DECIMAL(6,2))

COURSEID    CNAME            CFEE
10        SQLSERVER          1200.00
20         SQL DBA           1500.00
40         MSBI              3200.00
50         SAP               2400.00



--- New Query -> SELECT * FROM STUDENT
                 SELECT * FROM COURSE

--Inner Join--
SELECT * FROM STUDENT INNER JOIN COURSE ON STUDENT.COURSEID=COURSE.COURSEID

--Left Outer Join--
SELECT * FROM STUDENT S LEFT OUTER JOIN COURSE C ON S.COURSEID=C.COURSEID       -> S is Alis,Temporary also C

--Right Outer Join--
SELECT * FROM STUDENT S RIGHT OUTER JOIN COURSE C ON S.COURSEID=C.COURSEID       -> S is Alis,Temporary also C

--Full Outer Join--
SELECT * FROM STUDENT S FULL OUTER JOIN COURSE C ON S.COURSEID=C.COURSEID       -> S is Alis,Temporary also C

--Cross Join--
SELECT * FROM STUDENT CROSS JOIN COURSE

--Equi Join--
CREATE TABLE TEST1(SNO INT, NAME VARCHAR(50))
CREATE TABLE TEST2(SNO INT, NAME VARCHAR(50))

SNO       NAME    -> TEST1 Table Insert Data
10        SAI
20        ADAMS
30        JAMES


SNO       NAME    -> TEST2 Table Insert Data
10        WARNER
20        ALLEN
40        JONES

SELECT * FROM TEST1
SELECT * FROM TEST2

--Equi Join--
SELECT * FROM TEST1,TEST2 WHERE TEST1.SNO=TEST2.SNO

--Non Equi Join--
SELECT * FROM TEST1,TEST2 WHERE TEST1.SNO>TEST2.SNO

CREATE DATABASE MYCLASS
USE MYCLASS
CREATE TABLE EMPDETAILS (EID INT, ENAME CHAR(20),SALARY MONEY, MID TINYINT) -> and "Excute" Button

EID    ENAME     SALARY 
101    SMITH     80000.0000
102    WARNER    11000.0000
103    JAMES     18000.0000
104    SCOTT     82000.0000
105    BALKE     34000.0000
106    ADAMS     8000.0000

SELECT * FROM EMPDETAILS

SELECT * FROM EMPDETAILS E1, EMPDETAILS E2 WHERE E1.SALARY=E2.SALARY AND E2.ENAME='SMITH'

SELECT E1.EID, E1.ENAME, E1.SALARY FROM EMPDETAILS E1,EMPDETAILS E2 WHERE E1.SALARY=E2.SALARY AND E2.ENAME='SMITH'   -> E1.SALARY=E2.SALARY( Joint Condition )
                                                                                                                     -> E2.ENAME='SMITH' ( Addition Condition )


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Clauses
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) GROUP BY CLAUSE
------------------- 
*It is Used to Grouping the Similar Data Based on the Columns.
 
 CREATE DATABASE MYCLASS
 USE EMP
 CREATE TABLE EMP(EMPNO INT, ENAME CHAR(10), JOB CHAR(10), SALARY MONEY,DEPT TINYINT)
 
  EMPNO     ENAME       JOB          SALARY        DEPT
   1        SMITH      CLERK         8000.00        20
   2        ALLEN      SALESMAN      57000.00       30       
   3        DIN        CLERK         8000.00        30
   4        JONES      MANAGER       32000.00       20
   5        MARTIN      SALESMAN     72000.00       30
   6        SCOTT       ANALYST      40000.00       20    
   7        KING       PRESIDENT     98000.00       10 
   8        TONY       SALESMAN       79000.00       30   


   SELECT JOB,COUNT(*) NUMOFEMPLOYEE FROM EMP GROUP BY JOB  -> NUMOFEMPLOYEE ( Alias Name )
   
   SELECT JOB,SUM(SALARY) FROM EMP GROUP BY JOB

   SELECT JOB,MAX(SALARY) MAXSAL,MIN(SALARY) MINSAL,AVG(SALARY)AVGSAL FROM EMP GROUP BY JOB

   SELECT JOB,COUNT(*)NUMBEROFEMPLOYEE,DEPTNO FROM EMP GROUP BY JOB,DEPTNO
   
2) HAVING CLAUSE
----------------
   *To Filtering the Records After Grouping the Data.
   *Having Can be Used Along with Group by Clause.

    SELECT JOB,COUNT(*) FROM EMP GROUP BY JOB HAVING COUNT(*)<4

    SELECT JOB,SUM(SALARY) FROM EMP GROUP BY JOB HAVING SUM(SALARY)>10000


-------------------------------------------------------------------------------------------------------------------------
Transaction Control Language
-------------------------------------------------------------------------------------------------------------------------
  *"Transaction" to Perform Some Operation
  * INSERT, UPDATE, DELETE
  * The Above Operation Usd to Control the Data in Table
  * To Control the Data of the Table Purpose (COMMANDS):
         -> BEGIN TRANSACTION 
               * To Start the Transaction
               *SYNTAX : BEGIN TRANSACTION 
                        <WRITE STATEMENTS>

         -> COMMIT
              *To Make the Transaction is Perminent by Explicitly(User)
              *Once the Operation is Commit then we Cannot Rollback
              * SYNTAX : BEGIN TRANSACTION
                         <WRITE STATEMENTS>
                         COMMIT

         -> ROLLBACK
             *To Cancel a Transaction (Undo Operation)
             * SYNTAX : BEGIN TRANSACTION
                        ROLLBACK
        
         -> SAVEPOINT
             *It is Used to Create a Temporary Memory for Store the Values Which we want to Conditionally Cancelled.
             *SYNTAX : BEGIN TRANSACTION
                       <WRITE STATEMENTS>
                       SAVE TRANSACTION <POINTER NAME>
                       <WRITE STATEMENTS WHICH WE CANCELLED>

   CREATE TABLE BRANCH(BCODE INT, BNAME VARCHAR(50),LOCATION VARCHAR(50))

   SELECT * FROM BRANCH

   BEGIN TRANSACTION     -> (Use For Priviously Data)
   INSERT INTO BRANCH VALUES(1021,'SBI','HYD')
-> COMMIT  -> **if You Use COMMIT Keyword Never Go go Previously Data,Perminently Execution
   BEGIN TRANSACTION     -> (Use For Priviously Data)
   ROLLBACK              -> (Use For Priviously Data)
   SELECT * FROM BRANCH    

   BEGIN TRANSACTION     -> (Use For Priviously Data)
   UPDATE BRANCH SET LOCATION='MUMBAI' WHERE BCODE=1021
-> COMMIT  -> **if You Use COMMIT Keyword Never Go go Previously Data,Perminently Execution
   BEGIN TRANSACTION     -> (Use For Priviously Data)
   ROLLBACK              -> (Use For Priviously Data)
   SELECT * FROM BRANCH   

   BEGIN TRANSACTION     -> (Use For Priviously Data)
   DELETE FROM BRANCH WHERE BCODE=1021
   BEGIN TRANSACTION     -> (Use For Priviously Data)
   ROLLBACK              -> (Use For Priviously Data)
   SELECT * FROM BRANCH   



  INSERT INTO BRANCH VALUES(1021,'SBI','HYD'),(1022,'HDFC','MUMAI'),(1023,'ICIC','CHENNAI'),(1024,'PNB','PUNJAB'),(1025,'BOI','DELHI')
  BEGIN TRANSACTION
  DELETE FROM BRANCH WHERE BCODE=1021   -> ( It's 2 Rows Deleted in Buffer Memmory, but Not Perminent Deleted )
  DELETE FROM BRANCH WHERE BCODE=1023
  SAVE TRANSACTION S1                   ->  ( Store 1023 Record Seperate Memory S1 Pointer )
  DELETE FROM BRANCH WHERE BCODE=1025

  SELECT * FROM BRANCH

  BEGIN TRANSACTION ROLLBACK  -> Previously Deleted Data 1

  BEGIN TRANSACTION ROLLBACK S1 -> Show 3 Values         2

  BEGIN TRANSACTION ROLLBACK -> Show All Values          3

  SELECT * FROM BRANCH


--------------------------------------------------------------------------------------------------------------------------------
Char and Varchar
--------------------------------------------------------------------------------------------------------------------------------
1) Char(size)                                   2) Varchar (size / max)
 * FixedLength                                   * Variable Length DataType
 * Static Datatype                               * Dynamic Datatype
 * 1char = 1byte                                 * Characters & Alphanumeric Characters
 * Total 8000bytes                               * Varchar(size) => 800bytes
 * Total 8000Chars                               * Varchar(Max) => 2GB
 * Characters & Alphanumeric Characters          * 1char = 1byte   
 * Droback is Waste Unneccesary Memory           * Cannot Waste Memory

-----------------------------------------------------------------------------------------------
 UniCode and Non-UniCode DataTypes
-----------------------------------------------------------------------------------------------

--------------------------------------------------------- Telugu Tutorials SQL ---------------------------------------------------------------

CREATE DATABSE CLASSDB; -> Create Database-----------------------------------------------------

USE CLASSDB -> Select Database Name------------------------------------------------------------

CREATE TABLE EMPLOYEE (
Id int identity(1,1), FirstName nvarchar(100), LastName nvarchar(100), DateOfBirth datetime, ContactNumber nvarchar(10) primary key,
Country nvarchar(50),State nvarchar(50), District nvarchar(50), Village nvarchar(50), Address nvarchar(max),
 Zipcode nvarchar(10), Status int)   -> Click "Excute" Button-------------------------------------------------------

SELECT * FROM CLASSDB -> Read the Table Data-----------------------------------------------------------------------

INSERT INTO CLASSDB VALUES('Raj','Kumar', '04-08-1997', '8328369027', 'India', Telangana', 'Karimagar','Manakondur', 'SrinivasNagar', '505469', 1) -> iNSERT Data to DATABASE-----------------------------------

INSERT INTO CLASSDB (FirstName, LastName,ContactNumber)VALUES('Abhi', 'Test', '1234567890') -> Insert Only "Perticular" Data to Database & Remaining all "NULL" -------------------------------------------------

DROP TABLE CLASSDB -> Delete the Table ----------------------------------------------------

NOT NULL -> Don't Accept NULL Values ------------------------------------------------------

PRIMARY KEY,   -> 1,2,3,4,5.....Serial  --------------------------------------------------
indentity(1,1) -> 1,2,3,4,5.....Serial ---------------------------------------------------
identity(1,2)  -> 1,3,5,7,9..... Jump to the Second Number--------------------------------

SELECT FirstName+ ''+LastName as 'FullName', DateOfBirth, ContactNumber FROM CLASSDB  -> Get List of ,FirstNames, LastNames ,DateOfBirth, ContactNumber -------------------------------------

SELECT * FROM CLASSDB WHERE ContactNumber='8328369027' AND FirstName='Rajkumar' -> Find the List of ContactNumbers,FirstNames and Return the DATA ------------------------------------------

SELECT * FROM CLASSDB WHERE ContactNumber='8328369027' OR FirstName='Rajkumar' -> Find the List of ContactNumbers,FirstNames and Return the DATA --------------------------------------------

SELECT * FROM CLASSDB WHERE ID BETWEEN 1 AND 9 -> from "One" to "Nine" TotalList ------------------------------------------------------------

SELECT * FROM CLASSDB WHERE ContactNumber!='8328369027' ---------------------------------------------------------------------------

------------------------------------- Update Query-----------------------------------------
SELECT * FROM CLASSDB WHERE id=1

UPDATE CLASSDB SET LastName='Anaveni', ContactNumber="1234567890", WHERE id=1 -> Update Perticular Record -------------------------------------------

------------------------------------ Delete Query------------------------------------------
SELECT * FROM CLASSDB

DELETE FROM CLASSDB WHERE id=1 -> Delete Perticular Record -----------------------------------------------------------------------------

TRUNCATE TABLE CLASSDB -> Delete Only "Table Body" not "Table Head" ---------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------

create table myTest (Id int identity(1,1), FirstName nvarchar(50)) -> Create A Table -----------------------------------

select * from myTest -> -------------------------------------------------

---------------------------------------------------------------Add New Column Existing Table --------------------------------------

alter table mytest -> Add Columns Existing Table "Target"
add Dob datetime  -> Add Column Existing Table 

-------------------------------------------------------------- Delete Columns Existing Table ---------------------------------------------------------

alter table mytest -> Delete Columns Existing Table "Target"
drop column dob  -> Delete Column Existing Table 

-------------------------------------------------------------- Add Existing Column Size -------------------------------------------------
alter table mytest
alter column Dob nvarchar(50)
-----------------------------------------------------------------------------------------------------------------------------------------
  
